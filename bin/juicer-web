#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Juicer - Administer Pulp and Release Carts
# Copyright Â© 2013, Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


import sys
import os
sys.path.insert(0, os.path.abspath('.'))
import web
import json
from juicer.utils import create_json_str as jstr
from juicer.utils.web import file_if_exists as fileif

##############################################################################
# Routing

urls = (
    # Static Content
    '/css/(.*\.css)', 'css',
    '/js/(.*\.js)', 'js',
    '/img/(.*)', 'img',

    # Get requests that accept a parameter:
    '/rest/juicer/list/(.+)', 'juicer_list',
    '/rest/juicer/list/?', 'juicer_list',

    # Plain GET requests here:
    '/rest/juicer/(.+)', 'juicer_rest',

    # Catch-Alls
    '(.*)', 'static',
    )

app = web.application(urls, globals())

##############################################################################
class juicer_list:
    def GET(self, glob='*'):
        import juicer.juicer.Parser
        parser = juicer.juicer.Parser.Parser()
        args = parser.parser.parse_args(['list', glob])
        juicer.utils.Log.LOG_LEVEL_CURRENT = 0
        result = args.j(args)
        web.header('Content-Type', 'application/json')
        return jstr(result)

##############################################################################
class juicer_rest:
    def GET(self, action):
        import juicer.juicer.Parser
        parser = juicer.juicer.Parser.Parser()

        if action == 'hello':
            args = parser.parser.parse_args(['hello'])
        else:
            raise web.notfound()

        juicer.utils.Log.LOG_LEVEL_CURRENT = 0
        result = args.j(args)
        web.header('Content-Type', 'application/json')
        return jstr(result)

##############################################################################
class img:
    def GET(self, path):
        if path.endswith('gif'):
            type = 'gif'
        elif path.endswith('jpg'):
            type = 'jpeg'
        elif path.endswith('png'):
            type ='png'
        else:
            print "WTF? %s" % path

        web.header('Content-Type', 'image/%s' % type)
        return fileif(app, './static/img/%s' % path)

##############################################################################
class js:
    def GET(self, path):
        web.header('Content-Type', 'text/javascript')
        return fileif(app, './static/js/%s' % path)


##############################################################################
class css:
    def GET(self, path):
        web.header('Content-Type', 'text/css')
        return fileif(app, './static/css/%s' % path)


##############################################################################
class static:
    def GET(self, path="/"):
        web.header('Content-Type', 'text/html')
        if path == "/" or path == "":
            return fileif(app, "./static/index.html")
        else:
            return fileif(app, "./static/%s" % path)


##############################################################################
if __name__ == "__main__":
    app.run()
